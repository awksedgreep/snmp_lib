defmodule SnmpLib.MIB.Parser do
  @moduledoc """
  MIB parser ported from Erlang OTP snmpc_mib_gram.yrl with enhanced error reporting.
  
  Handles all the vendor quirks and edge cases from the original Yacc grammar
  while providing better error messages and recovery. Supports both SNMPv1 
  and SNMPv2 MIB parsing.
  
  Based on the Erlang OTP grammar structure:
  - Top-level MIB parsing with MODULE-IDENTITY detection
  - Import statement handling
  - Object type definitions (OBJECT-TYPE)
  - Object identity definitions (OBJECT-IDENTITY) 
  - Notification types and groups
  - Module compliance and agent capabilities
  - Textual conventions
  - Legacy SNMPv1 trap types
  """
  
  alias SnmpLib.MIB.{AST, Lexer, Logger, Error}
  
  @type parse_result :: 
    {:ok, AST.mib()} |
    {:error, [Error.t()]} |
    {:warning, AST.mib(), [Error.t()]}
  
  @type parse_context :: %{
    errors: [Error.t()],
    warnings: [Error.t()],
    current_module: binary() | nil,
    imports: [AST.import()],
    snmp_version: :v1 | :v2c | nil
  }
  
  @doc """
  Parse MIB source content into an AST.
  
  ## Examples
  
      iex> mib_content = \"\"\"
      ...> TEST-MIB DEFINITIONS ::= BEGIN
      ...> IMPORTS DisplayString FROM SNMPv2-TC;
      ...> END
      ...> \"\"\"
      iex> {:ok, mib} = SnmpLib.MIB.Parser.parse(mib_content)
      iex> mib.name
      "TEST-MIB"
  """
  @spec parse(binary()) :: parse_result()
  def parse(mib_content) when is_binary(mib_content) do
    with {:ok, tokens} <- Lexer.tokenize(mib_content) do
      Logger.log_parse_progress("parser", length(tokens))
      parse_tokens(tokens)
    end
  end
  
  @doc """
  Parse a list of tokens into an AST.
  """
  @spec parse_tokens([Lexer.token()]) :: parse_result()
  def parse_tokens(tokens) do
    context = %{
      errors: [],
      warnings: [],
      current_module: nil,
      imports: [],
      snmp_version: nil
    }
    
    case do_parse_mib(tokens, context) do
      {:ok, mib, context} ->
        handle_parse_result(mib, context)
      {:error, context} ->
        {:error, context.errors}
    end
  end
  
  # Main parsing entry point - handles complete MIB structure
  defp do_parse_mib(tokens, context) do
    with {:ok, {mib_name, oid_assignment}, rest, context} <- parse_mib_header(tokens, context),
         {:ok, imports, rest, context} <- parse_imports_section(rest, context),
         {:ok, definitions, rest, context} <- parse_definitions_section(rest, context),
         {:ok, rest, context} <- expect_token(rest, {:keyword, :end}, context) do
      
      # Determine SNMP version from definitions
      snmp_version = AST.determine_snmp_version(definitions)
      
      mib = AST.new_mib(mib_name, [
        imports: imports,
        definitions: add_oid_assignment(definitions, mib_name, oid_assignment),
        oid_tree: AST.build_oid_tree(definitions),
        metadata: build_metadata(snmp_version, context)
      ])
      
      Logger.log_parse_progress(mib_name, length(definitions))
      {:ok, mib, %{context | snmp_version: snmp_version}}
    end
  end
  
  # Parse MIB header: "mibname DEFINITIONS ::= BEGIN"
  defp parse_mib_header(tokens, context) do
    with {:ok, mib_name, rest, context} <- expect_identifier(tokens, context),
         {:ok, rest, context} <- expect_token(rest, {:keyword, :definitions}, context),
         {:ok, rest, context} <- expect_token(rest, {:symbol, :assign}, context),
         {:ok, rest, context} <- expect_token(rest, {:keyword, :begin}, context) do
      
      # Look ahead for MODULE-IDENTITY to determine if this is the module OID assignment
      oid_assignment = check_for_module_identity(rest)
      
      {:ok, {mib_name, oid_assignment}, rest, %{context | current_module: mib_name}}
    end
  end
  
  # Parse IMPORTS section (optional)
  defp parse_imports_section([{:keyword, :imports, _} | rest], context) do
    parse_import_statements(rest, [], context)
  end
  
  defp parse_imports_section(tokens, context) do
    # No imports section
    {:ok, [], tokens, context}
  end
  
  # Parse individual import statements - handles multiple FROM clauses
  defp parse_import_statements(tokens, imports, context) do
    case parse_all_imports(tokens, [], context) do
      {:ok, new_imports, rest, context} ->
        {:ok, Enum.reverse(new_imports), rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  # Parse all import groups until semicolon
  defp parse_all_imports([{:symbol, :semicolon, _} | rest], imports, context) do
    {:ok, imports, rest, context}
  end
  
  # Skip commas between import groups
  defp parse_all_imports([{:symbol, :comma, _} | rest], imports, context) do
    parse_all_imports(rest, imports, context)
  end
  
  defp parse_all_imports(tokens, imports, context) do
    case parse_single_import_group(tokens, context) do
      {:ok, import, rest, context} ->
        parse_all_imports(rest, [import | imports], context)
      {:error, _} = error ->
        error
    end
  end
  
  # Parse a single import group: "symbol1, symbol2, ... FROM ModuleName"
  defp parse_single_import_group(tokens, context) do
    case collect_symbols_until_from(tokens, [], context) do
      {:ok, symbols, [{:keyword, :from, _} | rest], context} ->
        with {:ok, module_name, rest, context} <- expect_identifier(rest, context) do
          line = get_line_from_tokens(tokens)
          import = AST.new_import(symbols, module_name, line)
          {:ok, import, rest, context}
        end
      {:error, _} = error ->
        error
    end
  end
  
  # Collect all symbols (identifiers and keywords) until FROM keyword
  defp collect_symbols_until_from([{:keyword, :from, _} | _] = tokens, symbols, context) do
    {:ok, Enum.reverse(symbols), tokens, context}
  end
  
  defp collect_symbols_until_from([{:identifier, symbol, _} | rest], symbols, context) do
    collect_symbols_until_from_continue(rest, [symbol | symbols], context)
  end
  
  # Allow any keyword to be imported - expand the list significantly
  defp collect_symbols_until_from([{:keyword, symbol, _} | rest], symbols, context) when symbol != :from do
    symbol_name = convert_symbol_name(symbol)
    collect_symbols_until_from_continue(rest, [symbol_name | symbols], context)
  end
  
  defp collect_symbols_until_from(tokens, _symbols, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "import symbol or FROM keyword",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Handle comma continuation in symbol collection
  defp collect_symbols_until_from_continue([{:symbol, :comma, _} | rest], symbols, context) do
    collect_symbols_until_from(rest, symbols, context)
  end
  
  defp collect_symbols_until_from_continue(tokens, symbols, context) do
    # No comma, check for FROM
    collect_symbols_until_from(tokens, symbols, context)
  end
  
  # Parse definitions section - handles all MIB definitions
  defp parse_definitions_section(tokens, context) do
    parse_definition_list(tokens, [], context)
  end
  
  defp parse_definition_list([{:keyword, :end, _} | _] = tokens, definitions, context) do
    {:ok, Enum.reverse(definitions), tokens, context}
  end
  
  defp parse_definition_list(tokens, definitions, context) do
    case parse_single_definition(tokens, context) do
      {:ok, definition, rest, context} ->
        parse_definition_list(rest, [definition | definitions], context)
      {:error, _} = error ->
        error
    end
  end
  
  # Parse individual definitions based on type
  defp parse_single_definition([{:identifier, name, pos} | rest], context) do
    case rest do
      [{:keyword, :object_type, _} | _] ->
        parse_object_type(name, pos, rest, context)
      [{:keyword, :object_identity, _} | _] ->
        parse_object_identity(name, pos, rest, context)
      [{:keyword, :module_identity, _} | _] ->
        parse_module_identity(name, pos, rest, context)
      [{:keyword, :notification_type, _} | _] ->
        parse_notification_type(name, pos, rest, context)
      [{:keyword, :object_group, _} | _] ->
        parse_object_group(name, pos, rest, context)
      [{:keyword, :trap_type, _} | _] ->
        parse_trap_type(name, pos, rest, context)
      [{:keyword, :module_compliance, _} | _] ->
        parse_module_compliance(name, pos, rest, context)
      [{:keyword, :object, _}, {:keyword, :identifier, _}, {:symbol, :assign, _} | _] ->
        parse_object_identifier_definition(name, pos, rest, context)
      [{:symbol, :assign, _}, {:keyword, :textual_convention, _} | _] ->
        parse_textual_convention(name, pos, rest, context)
      [{:keyword, :textual_convention, _} | _] ->
        parse_textual_convention(name, pos, rest, context)
      [{:symbol, :assign, _}, {:keyword, :sequence, _}, {:symbol, :open_brace, _} | _] ->
        parse_sequence_type_definition(name, pos, rest, context)
      [{:symbol, :assign, _} | _] ->
        parse_object_identifier_assignment(name, pos, rest, context)
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "definition type",
          actual: "unknown",
          line: pos[:line],
          column: pos[:column]
        ))}
    end
  end
  
  # Handle keywords that can be used as identifiers (like DisplayString for TEXTUAL-CONVENTION)
  defp parse_single_definition([{:keyword, keyword, pos} | rest], context) when keyword in [
    # Common textual convention types
    :display_string, :row_status, :mac_address, :phys_address, :truth_value,
    :time_stamp, :time_interval, :date_and_time, :storage_type, :t_domain, :t_address,
    :test_and_incr, :autonomous_type, :instance_pointer, :variable_pointer, :row_pointer,
    # SNMP types that can be used as identifiers
    :counter32, :counter64, :gauge32, :timeticks, :opaque, :ip_address,
    :unsigned32, :integer32
  ] do
    name = convert_symbol_name(keyword)
    case rest do
      [{:keyword, :object_type, _} | _] ->
        parse_object_type(name, pos, rest, context)
      [{:keyword, :object_identity, _} | _] ->
        parse_object_identity(name, pos, rest, context)
      [{:keyword, :module_identity, _} | _] ->
        parse_module_identity(name, pos, rest, context)
      [{:keyword, :notification_type, _} | _] ->
        parse_notification_type(name, pos, rest, context)
      [{:keyword, :object_group, _} | _] ->
        parse_object_group(name, pos, rest, context)
      [{:keyword, :trap_type, _} | _] ->
        parse_trap_type(name, pos, rest, context)
      [{:keyword, :module_compliance, _} | _] ->
        parse_module_compliance(name, pos, rest, context)
      [{:keyword, :object, _}, {:keyword, :identifier, _}, {:symbol, :assign, _} | _] ->
        parse_object_identifier_definition(name, pos, rest, context)
      [{:symbol, :assign, _}, {:keyword, :textual_convention, _} | _] ->
        parse_textual_convention(name, pos, rest, context)
      [{:keyword, :textual_convention, _} | _] ->
        parse_textual_convention(name, pos, rest, context)
      [{:symbol, :assign, _}, {:keyword, :sequence, _}, {:symbol, :open_brace, _} | _] ->
        parse_sequence_type_definition(name, pos, rest, context)
      [{:symbol, :assign, _} | _] ->
        parse_object_identifier_assignment(name, pos, rest, context)
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "definition type",
          actual: "unknown",
          line: pos[:line],
          column: pos[:column]
        ))}
    end
  end
  
  defp parse_single_definition(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "identifier",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Parse OBJECT-TYPE definition
  defp parse_object_type(name, pos, [{:keyword, :object_type, _} | rest], context) do
    with {:ok, syntax, rest, context} <- parse_syntax_clause(rest, context),
         {:ok, units, rest, context} <- parse_optional_units_clause(rest, context),
         {:ok, max_access, rest, context} <- parse_max_access_clause(rest, context),
         {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, optional_fields, rest, context} <- parse_optional_object_fields(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      base_fields = [
        syntax: syntax,
        max_access: max_access,
        status: status,
        description: description,
        oid: oid,
        line: pos[:line]
      ]
      
      # Add units if present
      base_fields = if units, do: [{:units, units} | base_fields], else: base_fields
      
      object_type = AST.new_object_type(name, base_fields ++ optional_fields)
      
      {:ok, object_type, rest, context}
    end
  end
  
  # Parse OBJECT-IDENTITY definition
  defp parse_object_identity(name, pos, [{:keyword, :object_identity, _} | rest], context) do
    with {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, optional_fields, rest, context} <- parse_optional_identity_fields(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      object_identity = AST.new_object_identity(name, [
        status: status,
        description: description,
        oid: oid,
        line: pos[:line]
      ] ++ optional_fields)
      
      {:ok, object_identity, rest, context}
    end
  end
  
  # Parse MODULE-IDENTITY definition (SNMPv2 only)
  defp parse_module_identity(name, pos, [{:keyword, :module_identity, _} | rest], context) do
    with {:ok, last_updated, rest, context} <- parse_last_updated_clause(rest, context),
         {:ok, organization, rest, context} <- parse_organization_clause(rest, context),
         {:ok, contact_info, rest, context} <- parse_contact_info_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, revisions, rest, context} <- parse_revision_clauses(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      module_identity = %{
        __type__: :module_identity,
        name: name,
        last_updated: last_updated,
        organization: organization,
        contact_info: contact_info,
        description: description,
        revision_history: revisions,
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, module_identity, rest, context}
    end
  end
  
  # Parse simple object identifier assignment: "name ::= { parent child }"
  defp parse_object_identifier_assignment(name, pos, [{:symbol, :assign, _} | rest], context) do
    with {:ok, oid, rest, context} <- parse_oid_value(rest, context) do
      assignment = %{
        __type__: :object_identifier_assignment,
        name: name,
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, assignment, rest, context}
    end
  end
  
  # Parse OBJECT IDENTIFIER definition: "name OBJECT IDENTIFIER ::= { parent child }"
  defp parse_object_identifier_definition(name, pos, [{:keyword, :object, _}, {:keyword, :identifier, _}, {:symbol, :assign, _} | rest], context) do
    with {:ok, oid, rest, context} <- parse_oid_value(rest, context) do
      assignment = %{
        __type__: :object_identifier,
        name: name,
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, assignment, rest, context}
    end
  end
  
  # Parse SEQUENCE type definition: "name ::= SEQUENCE { element1 Type1, element2 Type2, ... }"
  defp parse_sequence_type_definition(name, pos, [{:symbol, :assign, _}, {:keyword, :sequence, _}, {:symbol, :open_brace, _} | rest], context) do
    with {:ok, elements, [{:symbol, :close_brace, _} | rest], context} <- parse_sequence_elements_detailed(rest, [], context) do
      sequence_def = %{
        __type__: :sequence_type,
        name: name,
        elements: elements,
        line: pos[:line]
      }
      
      {:ok, sequence_def, rest, context}
    end
  end
  
  # Parse sequence elements with detailed type information  
  defp parse_sequence_elements_detailed([{:symbol, :close_brace, _} | _] = tokens, elements, context) do
    {:ok, Enum.reverse(elements), tokens, context}
  end
  
  defp parse_sequence_elements_detailed([{:identifier, element_name, _} | rest], elements, context) do
    with {:ok, element_type, rest, context} <- parse_sequence_element_type(rest, context) do
      element = %{name: element_name, type: element_type}
      
      # Handle optional comma
      rest = case rest do
        [{:symbol, :comma, _} | remaining] -> remaining
        _ -> rest
      end
      
      parse_sequence_elements_detailed(rest, [element | elements], context)
    end
  end
  
  defp parse_sequence_elements_detailed(tokens, _elements, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "sequence element or closing brace",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Parse sequence element types (simplified - handles basic types)
  defp parse_sequence_element_type([{:keyword, type, _} | rest], context) when type in [
    :integer, :octet, :truth_value, :date_and_time, :integer32, :counter32, :gauge32, :timeticks,
    :object_identifier, :ip_address, :opaque, :unsigned32, :counter64, :bits,
    :storage_type, :autonomous_type
  ] do
    case type do
      :octet ->
        case rest do
          [{:keyword, :string, _} | remaining] ->
            {:ok, :octet_string, remaining, context}
          _ ->
            {:ok, :octet, rest, context}
        end
      # Textual convention types should be treated as named types
      :truth_value ->
        {:ok, {:named_type, "TruthValue"}, rest, context}
      :storage_type ->
        {:ok, {:named_type, "StorageType"}, rest, context}
      :autonomous_type ->
        {:ok, {:named_type, "AutonomousType"}, rest, context}
      :date_and_time ->
        {:ok, {:named_type, "DateAndTime"}, rest, context}
      _ ->
        {:ok, type, rest, context}
    end
  end
  
  defp parse_sequence_element_type([{:identifier, type_name, _} | rest], context) do
    # Named type (e.g., TruthValue, DateAndTime)
    {:ok, {:named_type, type_name}, rest, context}
  end
  
  defp parse_sequence_element_type(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "type name",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Utility functions for parsing specific clauses
  
  defp parse_syntax_clause([{:keyword, :syntax, _} | rest], context) do
    parse_syntax_value(rest, context)
  end
  
  defp parse_syntax_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "SYNTAX clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_max_access_clause([{:keyword, :max_access, _} | rest], context) do
    case rest do
      [{:keyword, access_level, _} | rest] when access_level in [
        :not_accessible, :accessible_for_notify, :read_only, :read_write, :read_create
      ] ->
        {:ok, access_level, rest, context}
      [{:identifier, "read-only", _} | rest] ->
        {:ok, :read_only, rest, context}
      [{:identifier, "read-write", _} | rest] ->
        {:ok, :read_write, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "access level",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_max_access_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "MAX-ACCESS clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_status_clause([{:keyword, :status, _} | rest], context) do
    case rest do
      [{:keyword, status, _} | rest] when status in [:current, :deprecated, :obsolete, :mandatory] ->
        {:ok, status, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "status value",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_status_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "STATUS clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_description_clause([{:keyword, :description, _} | rest], context) do
    case rest do
      [{:string, description, _} | rest] ->
        {:ok, description, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "description string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_description_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "DESCRIPTION clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse optional UNITS clause (can appear after SYNTAX)
  defp parse_optional_units_clause([{:keyword, :units, _} | rest], context) do
    case rest do
      [{:string, units_value, _} | rest] ->
        {:ok, units_value, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "units string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_optional_units_clause(tokens, context) do
    # No UNITS clause present
    {:ok, nil, tokens, context}
  end
  
  defp parse_oid_assignment([{:symbol, :assign, _} | rest], context) do
    parse_oid_value(rest, context)
  end
  
  # Handle unexpected tokens (e.g., END keyword when expecting OID assignment)
  defp parse_oid_assignment(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "OID assignment (::=)",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  defp parse_oid_value([{:symbol, :open_brace, _} | rest], context) do
    parse_oid_elements(rest, [], context)
  end
  
  defp parse_oid_elements([{:symbol, :close_brace, _} | rest], oid_elements, context) do
    {:ok, Enum.reverse(oid_elements), rest, context}
  end
  
  defp parse_oid_elements([{:identifier, name, _} | rest], oid_elements, context) do
    case rest do
      [{:symbol, :open_paren, _}, {:number, num, _}, {:symbol, :close_paren, _} | rest] ->
        parse_oid_elements(rest, [{name, num} | oid_elements], context)
      [{:symbol, :open_paren, _}, {:integer, num, _}, {:symbol, :close_paren, _} | rest] ->
        parse_oid_elements(rest, [{name, num} | oid_elements], context)
      [{:number, num, _} | rest] ->
        parse_oid_elements(rest, [num | oid_elements], context)
      [{:integer, num, _} | rest] ->
        parse_oid_elements(rest, [num | oid_elements], context)
      _ ->
        parse_oid_elements(rest, [name | oid_elements], context)
    end
  end
  
  # Handle keywords as OID elements (e.g., iso, org, dod)
  defp parse_oid_elements([{:keyword, keyword, _} | rest], oid_elements, context) when keyword in [
    :iso, :org, :dod, :internet, :mgmt, :mib, :system
  ] do
    name = Atom.to_string(keyword)
    case rest do
      [{:symbol, :open_paren, _}, {:number, num, _}, {:symbol, :close_paren, _} | rest] ->
        parse_oid_elements(rest, [{name, num} | oid_elements], context)
      [{:symbol, :open_paren, _}, {:integer, num, _}, {:symbol, :close_paren, _} | rest] ->
        parse_oid_elements(rest, [{name, num} | oid_elements], context)
      [{:number, num, _} | rest] ->
        parse_oid_elements(rest, [num | oid_elements], context)
      [{:integer, num, _} | rest] ->
        parse_oid_elements(rest, [num | oid_elements], context)
      _ ->
        parse_oid_elements(rest, [name | oid_elements], context)
    end
  end
  
  defp parse_oid_elements([{:number, num, _} | rest], oid_elements, context) do
    parse_oid_elements(rest, [num | oid_elements], context)
  end
  
  # Handle :integer tokens (lexer inconsistency fix)
  defp parse_oid_elements([{:integer, num, _} | rest], oid_elements, context) do
    parse_oid_elements(rest, [num | oid_elements], context)
  end
  
  defp parse_oid_elements(tokens, _oid_elements, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "OID element",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse syntax value - handle different syntax types
  defp parse_syntax_value([{:keyword, :integer, _} | rest], context) do
    # Check for INTEGER constraints: INTEGER (0..255) or INTEGER { enum(1), values(2) }
    case rest do
      [{:symbol, :open_paren, _} | _] ->
        parse_integer_with_range(rest, context)
      [{:symbol, :open_brace, _} | _] ->
        parse_integer_with_enumeration(rest, context)
      _ ->
        {:ok, :integer, rest, context}
    end
  end
  
  defp parse_syntax_value([{:keyword, :octet, _}, {:keyword, :string, _} | rest], context) do
    # Check for OCTET STRING SIZE constraints (with or without space)
    case rest do
      [{:symbol, :open_paren, _}, {:keyword, :size, _} | _] ->
        parse_octet_string_with_size(rest, context)
      _ ->
        {:ok, :octet_string, rest, context}
    end
  end
  
  defp parse_syntax_value([{:keyword, :sequence, _}, {:keyword, :of, _} | rest], context) do
    case parse_syntax_value(rest, context) do
      {:ok, element_syntax, rest, context} ->
        {:ok, {:sequence_of, element_syntax}, rest, context}
      error ->
        error
    end
  end
  
  defp parse_syntax_value([{:keyword, :sequence, _}, {:symbol, :open_brace, _} | rest], context) do
    parse_sequence_definition(rest, context)
  end
  
  defp parse_syntax_value([{:keyword, :choice, _}, {:symbol, :open_brace, _} | rest], context) do
    parse_choice_definition(rest, context)
  end
  
  defp parse_syntax_value([{:keyword, syntax_type, _} | rest], context) when syntax_type in [
    :object_identifier, :counter32, :counter64, :gauge32, :timeticks, :opaque, :ip_address,
    :unsigned32, :integer32, :bits
  ] do
    {:ok, syntax_type, rest, context}
  end
  
  # Handle DisplayString and other type names that are keywords
  defp parse_syntax_value([{:keyword, :display_string, _} | rest], context) do
    {:ok, {:named_type, "DisplayString"}, rest, context}
  end
  
  defp parse_syntax_value([{:keyword, type_keyword, _} | rest], context) when type_keyword in [
    :truth_value, :row_status, :time_stamp, :date_and_time, :storage_type,
    :t_address, :t_domain, :phys_address, :mac_address, :test_and_incr,
    :autonomous_type, :instance_pointer, :variable_pointer, :row_pointer, :time_interval
  ] do
    type_name = convert_symbol_name(type_keyword)
    {:ok, {:named_type, type_name}, rest, context}
  end
  
  defp parse_syntax_value([{:identifier, type_name, _} | rest], context) do
    # Named type reference (e.g., DisplayString, TruthValue)
    {:ok, {:named_type, type_name}, rest, context}
  end
  
  defp parse_syntax_value(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "syntax type",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse integer with range constraints: INTEGER (0..255)
  defp parse_integer_with_range([{:symbol, :open_paren, _} | rest], context) do
    case parse_range_constraint(rest, context) do
      {:ok, constraints, [{:symbol, :close_paren, _} | rest], context} ->
        {:ok, {:integer, constraints}, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  # Parse integer with enumeration: INTEGER { enum1(1), enum2(2) }
  defp parse_integer_with_enumeration([{:symbol, :open_brace, _} | rest], context) do
    case parse_enumeration_values(rest, [], context) do
      {:ok, enums, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, {:integer, {:enumerated, enums}}, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  # Parse OCTET STRING with SIZE constraint - handle different parentheses patterns
  defp parse_octet_string_with_size([{:symbol, :open_paren, _}, {:keyword, :size, _}, {:symbol, :open_paren, _} | rest], context) do
    case parse_size_constraint(rest, context) do
      {:ok, size_constraint, remaining_tokens, context} ->
        # Look for closing parentheses - handle both patterns:
        # Pattern 1: OCTET STRING (SIZE (...)) - two closing parens
        # Pattern 2: OCTET STRING(SIZE (...)) - one closing paren  
        case remaining_tokens do
          [{:symbol, :close_paren, _}, {:symbol, :close_paren, _} | rest] ->
            {:ok, {:octet_string, {:size, size_constraint}}, rest, context}
          [{:symbol, :close_paren, _} | rest] ->
            {:ok, {:octet_string, {:size, size_constraint}}, rest, context}
          _ ->
            {:error, add_error(context, Error.new(:unexpected_token,
              expected: "closing parentheses for SIZE constraint",
              actual: get_token_type(remaining_tokens)
            ))}
        end
      {:error, _} = error ->
        error
    end
  end
  
  # Parse SEQUENCE definition (for table entries)
  defp parse_sequence_definition(tokens, context) do
    case parse_sequence_elements(tokens, [], context) do
      {:ok, elements, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, {:sequence, elements}, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  # Parse CHOICE definition
  defp parse_choice_definition(tokens, context) do
    case parse_choice_elements(tokens, [], context) do
      {:ok, choices, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, {:choice, choices}, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  # Parse range constraints: 0..255 or 1..65535
  defp parse_range_constraint([{:number, min, _}, {:symbol, :range, _}, {:number, max, _} | rest], context) do
    {:ok, {:range, min, max}, rest, context}
  end
  
  defp parse_range_constraint([{:number, value, _} | rest], context) do
    {:ok, {:single_value, value}, rest, context}
  end
  
  defp parse_range_constraint(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "range constraint",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse SIZE constraints: single value, range, or multi-value with pipes
  defp parse_size_constraint(tokens, context) do
    parse_size_values(tokens, [], context)
  end
  
  # Parse range first (higher precedence): 36..260 
  defp parse_size_values([{:number, min, _}, {:symbol, :range, _}, {:number, max, _} | rest], values, context) do
    # Handle range within size constraint
    range = {:range, min, max}
    case rest do
      [{:symbol, :pipe, _} | remaining] ->
        parse_size_values(remaining, [range | values], context)
      _ ->
        all_values = Enum.reverse([range | values])
        constraint = case all_values do
          [single] -> single
          multiple -> {:multi_value, multiple}
        end
        {:ok, constraint, rest, context}
    end
  end
  
  # Parse multiple size values separated by pipes: 8 | 11 | 16
  defp parse_size_values([{:number, value, _} | rest], values, context) do
    case rest do
      [{:symbol, :pipe, _} | remaining] ->
        # More values coming, continue parsing
        parse_size_values(remaining, [value | values], context)
      _ ->
        # End of values
        all_values = Enum.reverse([value | values])
        constraint = case all_values do
          [single] -> {:single_value, single}
          multiple -> {:multi_value, multiple}
        end
        {:ok, constraint, rest, context}
    end
  end
  
  defp parse_size_values(tokens, _values, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "size value or range",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse enumeration values: name1(1), name2(2)
  defp parse_enumeration_values([{:symbol, :close_brace, _} | _] = tokens, enums, context) do
    {:ok, Enum.reverse(enums), tokens, context}
  end
  
  defp parse_enumeration_values([{:identifier, name, _}, {:symbol, :open_paren, _}, {:number, value, _}, {:symbol, :close_paren, _} | rest], enums, context) do
    enum = {name, value}
    case rest do
      [{:symbol, :comma, _} | rest] ->
        parse_enumeration_values(rest, [enum | enums], context)
      _ ->
        parse_enumeration_values(rest, [enum | enums], context)
    end
  end
  
  defp parse_enumeration_values(tokens, _enums, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "enumeration value",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse SEQUENCE elements (simplified for now)
  defp parse_sequence_elements(tokens, elements, context) do
    {:ok, elements, tokens, context}  # TODO: Implement full SEQUENCE parsing
  end
  
  # Parse CHOICE elements (simplified for now)
  defp parse_choice_elements(tokens, choices, context) do
    {:ok, choices, tokens, context}  # TODO: Implement full CHOICE parsing
  end
  
  # Parse optional object fields (UNITS, INDEX, AUGMENTS, DEFVAL, REFERENCE)
  defp parse_optional_object_fields(tokens, context) do
    parse_optional_fields(tokens, [], context)
  end
  
  # Parse optional fields recursively
  defp parse_optional_fields([{:keyword, :units, _} | rest], fields, context) do
    case rest do
      [{:string, units_value, _} | rest] ->
        parse_optional_fields(rest, [{:units, units_value} | fields], context)
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "units string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_optional_fields([{:keyword, :index, _}, {:symbol, :open_brace, _} | rest], fields, context) do
    case parse_index_elements(rest, [], context) do
      {:ok, index_elements, [{:symbol, :close_brace, _} | rest], context} ->
        parse_optional_fields(rest, [{:index, index_elements} | fields], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_fields([{:keyword, :augments, _}, {:symbol, :open_brace, _} | rest], fields, context) do
    case expect_identifier(rest, context) do
      {:ok, table_name, [{:symbol, :close_brace, _} | rest], context} ->
        parse_optional_fields(rest, [{:augments, table_name} | fields], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_fields([{:keyword, :defval, _}, {:symbol, :open_brace, _} | rest], fields, context) do
    case parse_default_value(rest, context) do
      {:ok, default_value, [{:symbol, :close_brace, _} | rest], context} ->
        parse_optional_fields(rest, [{:defval, default_value} | fields], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_fields([{:keyword, :reference, _} | rest], fields, context) do
    case rest do
      [{:string, reference_value, _} | rest] ->
        parse_optional_fields(rest, [{:reference, reference_value} | fields], context)
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "reference string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  # If no more optional fields, return what we have
  defp parse_optional_fields(tokens, fields, context) do
    {:ok, Enum.reverse(fields), tokens, context}
  end
  
  # Parse INDEX elements
  defp parse_index_elements([{:symbol, :close_brace, _} | _] = tokens, elements, context) do
    {:ok, Enum.reverse(elements), tokens, context}
  end
  
  defp parse_index_elements([{:identifier, element, _} | rest], elements, context) do
    case rest do
      [{:symbol, :comma, _} | rest] ->
        parse_index_elements(rest, [element | elements], context)
      _ ->
        parse_index_elements(rest, [element | elements], context)
    end
  end
  
  defp parse_index_elements(tokens, _elements, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "index element",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Parse default values with enhanced support for various types
  defp parse_default_value([{:number, value, _} | rest], context) do
    {:ok, value, rest, context}
  end
  
  defp parse_default_value([{:string, value, _} | rest], context) do
    # Check if this is followed by 'H' or 'B' for hex/binary literals
    case rest do
      [{:identifier, "H", _} | remaining] ->
        # Hex literal: '000000000000'H
        {:ok, {:hex_string, value}, remaining, context}
      [{:identifier, "B", _} | remaining] ->
        # Binary literal: '1010'B
        {:ok, {:binary_string, value}, remaining, context}
      _ ->
        # Regular string
        {:ok, value, rest, context}
    end
  end
  
  defp parse_default_value([{:identifier, value, _} | rest], context) do
    {:ok, value, rest, context}
  end
  
  # Handle keywords that can be used as default values (true, false, etc.)
  defp parse_default_value([{:keyword, keyword, _} | rest], context) when keyword in [
    :true, :false, :up, :down, :enabled, :disabled, :active, :inactive,
    :current, :deprecated, :obsolete, :mandatory
  ] do
    value = Atom.to_string(keyword)
    {:ok, value, rest, context}
  end
  
  # Handle object identifier as default value: { iso org(3) dod(6) }
  defp parse_default_value([{:symbol, :open_brace, _} | rest], context) do
    case parse_oid_elements(rest, [], context) do
      {:ok, oid_elements, [{:symbol, :close_brace, _} | remaining], context} ->
        {:ok, {:object_identifier, oid_elements}, remaining, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_default_value(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "default value (number, string, identifier, hex/binary literal, or object identifier)",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  defp parse_optional_identity_fields(tokens, context) do
    {:ok, [], tokens, context}  # Simplified for now
  end
  
  # Parse MODULE-IDENTITY specific clauses
  defp parse_last_updated_clause([{:keyword, :last_updated, _} | rest], context) do
    case rest do
      [{:string, date_string, _} | rest] ->
        case validate_last_updated_format(date_string) do
          {:ok, formatted_date} ->
            {:ok, formatted_date, rest, context}
          {:error, reason} ->
            {:error, add_error(context, Error.new(:invalid_date_format,
              value: date_string,
              reason: reason,
              line: get_line_from_tokens(rest)
            ))}
        end
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "date string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_last_updated_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "LAST-UPDATED clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_organization_clause([{:keyword, :organization, _} | rest], context) do
    case rest do
      [{:string, org_string, _} | rest] ->
        {:ok, org_string, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "organization string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_organization_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "ORGANIZATION clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_contact_info_clause([{:keyword, :contact_info, _} | rest], context) do
    case rest do
      [{:string, contact_string, _} | rest] ->
        {:ok, contact_string, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "contact-info string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_contact_info_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "CONTACT-INFO clause",
      actual: get_token_type(tokens)
    ))}
  end
  
  defp parse_revision_clauses(tokens, context) do
    parse_all_revisions(tokens, [], context)
  end
  
  # Parse all REVISION clauses (optional, can be multiple)
  defp parse_all_revisions([{:keyword, :revision, _} | rest], revisions, context) do
    case parse_single_revision(rest, context) do
      {:ok, revision, rest, context} ->
        parse_all_revisions(rest, [revision | revisions], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_all_revisions(tokens, revisions, context) do
    # No more REVISION clauses
    {:ok, Enum.reverse(revisions), tokens, context}
  end
  
  # Parse a single REVISION clause
  defp parse_single_revision([{:string, date_string, _} | rest], context) do
    case rest do
      [{:keyword, :description, _}, {:string, desc_string, _} | rest] ->
        case validate_last_updated_format(date_string) do
          {:ok, formatted_date} ->
            revision = %{
              date: formatted_date,
              description: desc_string
            }
            {:ok, revision, rest, context}
          {:error, reason} ->
            {:error, add_error(context, Error.new(:invalid_date_format,
              value: date_string,
              reason: reason
            ))}
        end
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "DESCRIPTION clause after REVISION date",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_single_revision(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "revision date string",
      actual: get_token_type(tokens)
    ))}
  end
  
  # Validate LAST-UPDATED date format: "YYYYMMDDHHmmZ"
  defp validate_last_updated_format(date_string) do
    case String.match?(date_string, ~r/^\d{12}Z$/) do
      true ->
        # Parse the date components
        <<year::binary-size(4), month::binary-size(2), day::binary-size(2), 
          hour::binary-size(2), minute::binary-size(2), "Z">> = date_string
        
        case validate_date_components(year, month, day, hour, minute) do
          :ok ->
            {:ok, date_string}
          {:error, reason} ->
            {:error, reason}
        end
      false ->
        {:error, "Invalid date format. Expected YYYYMMDDHHmmZ format"}
    end
  end
  
  # Validate individual date components
  defp validate_date_components(year, month, day, hour, minute) do
    with {:ok, y} <- parse_and_validate_int(year, 1900, 3000, "year"),
         {:ok, m} <- parse_and_validate_int(month, 1, 12, "month"),
         {:ok, d} <- parse_and_validate_int(day, 1, 31, "day"),
         {:ok, h} <- parse_and_validate_int(hour, 0, 23, "hour"),
         {:ok, min} <- parse_and_validate_int(minute, 0, 59, "minute") do
      # Additional validation for day based on month
      max_day = days_in_month(m, y)
      if d <= max_day do
        :ok
      else
        {:error, "Invalid day #{d} for month #{m}"}
      end
    end
  end
  
  defp parse_and_validate_int(str, min, max, field_name) do
    case Integer.parse(str) do
      {value, ""} when value >= min and value <= max ->
        {:ok, value}
      {value, ""} ->
        {:error, "#{field_name} #{value} out of range #{min}-#{max}"}
      _ ->
        {:error, "Invalid #{field_name} format"}
    end
  end
  
  defp days_in_month(month, year) do
    case month do
      m when m in [1, 3, 5, 7, 8, 10, 12] -> 31
      m when m in [4, 6, 9, 11] -> 30
      2 -> if leap_year?(year), do: 29, else: 28
    end
  end
  
  defp leap_year?(year) do
    rem(year, 4) == 0 and (rem(year, 100) != 0 or rem(year, 400) == 0)
  end
  
  # Parse NOTIFICATION-TYPE definition (SNMPv2 only)
  defp parse_notification_type(name, pos, [{:keyword, :notification_type, _} | rest], context) do
    with {:ok, objects, rest, context} <- parse_optional_objects_clause(rest, context),
         {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      notification_type = %{
        __type__: :notification_type,
        name: name,
        objects: objects || [],
        status: status,
        description: description,
        reference: reference,
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, notification_type, rest, context}
    end
  end
  # Parse OBJECT-GROUP definition (SNMPv2 only)
  defp parse_object_group(name, pos, [{:keyword, :object_group, _} | rest], context) do
    with {:ok, objects, rest, context} <- parse_objects_clause(rest, context),
         {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      object_group = %{
        __type__: :object_group,
        name: name,
        objects: objects,
        status: status,
        description: description,
        reference: reference,
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, object_group, rest, context}
    end
  end
  # Parse TEXTUAL-CONVENTION definition
  defp parse_textual_convention(name, pos, [{:symbol, :assign, _}, {:keyword, :textual_convention, _} | rest], context) do
    with {:ok, display_hint, rest, context} <- parse_optional_display_hint_clause(rest, context),
         {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, syntax, rest, context} <- parse_syntax_clause(rest, context) do
      
      textual_convention = %{
        __type__: :textual_convention,
        name: name,
        display_hint: display_hint,
        status: status,
        description: description,
        reference: reference,
        syntax: syntax,
        line: pos[:line]
      }
      
      {:ok, textual_convention, rest, context}
    end
  end

  defp parse_textual_convention(name, pos, [{:keyword, :textual_convention, _} | rest], context) do
    with {:ok, display_hint, rest, context} <- parse_optional_display_hint_clause(rest, context),
         {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, syntax, rest, context} <- parse_syntax_clause(rest, context) do
      
      textual_convention = %{
        __type__: :textual_convention,
        name: name,
        display_hint: display_hint,
        status: status,
        description: description,
        reference: reference,
        syntax: syntax,
        line: pos[:line]
      }
      
      {:ok, textual_convention, rest, context}
    end
  end
  
  # Parse optional DISPLAY-HINT clause
  defp parse_optional_display_hint_clause([{:keyword, :display_hint, _} | rest], context) do
    case rest do
      [{:string, hint_string, _} | rest] ->
        case validate_display_hint(hint_string) do
          {:ok, validated_hint} ->
            {:ok, validated_hint, rest, context}
          {:error, reason} ->
            {:error, add_error(context, Error.new(:invalid_display_hint,
              value: hint_string,
              reason: reason,
              line: get_line_from_tokens(rest)
            ))}
        end
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "display hint string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_optional_display_hint_clause(tokens, context) do
    # No DISPLAY-HINT clause present
    {:ok, nil, tokens, context}
  end
  
  # Parse optional REFERENCE clause
  defp parse_optional_reference_clause([{:keyword, :reference, _} | rest], context) do
    case rest do
      [{:string, reference_string, _} | rest] ->
        {:ok, reference_string, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "reference string",
          actual: get_token_type(rest)
        ))}
    end
  end
  
  defp parse_optional_reference_clause(tokens, context) do
    # No REFERENCE clause present
    {:ok, nil, tokens, context}
  end
  
  # Parse optional OBJECTS clause for NOTIFICATION-TYPE
  defp parse_optional_objects_clause([{:keyword, :objects, _}, {:symbol, :open_brace, _} | rest], context) do
    case parse_object_list(rest, [], context) do
      {:ok, objects, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, objects, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_objects_clause(tokens, context) do
    # No OBJECTS clause present
    {:ok, nil, tokens, context}
  end
  
  # Parse list of object identifiers for OBJECTS clause
  defp parse_object_list([{:symbol, :close_brace, _} | _] = tokens, objects, context) do
    {:ok, Enum.reverse(objects), tokens, context}
  end
  
  defp parse_object_list([{:identifier, object_name, _} | rest], objects, context) do
    case rest do
      [{:symbol, :comma, _} | rest] ->
        parse_object_list(rest, [object_name | objects], context)
      _ ->
        parse_object_list(rest, [object_name | objects], context)
    end
  end
  
  defp parse_object_list(tokens, _objects, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "object identifier",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Parse required OBJECTS clause for OBJECT-GROUP (similar to optional version)
  defp parse_objects_clause([{:keyword, :objects, _}, {:symbol, :open_brace, _} | rest], context) do
    case parse_object_list(rest, [], context) do
      {:ok, objects, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, objects, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_objects_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "OBJECTS clause",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Validate DISPLAY-HINT format (simplified validation)
  defp validate_display_hint(hint_string) do
    # DISPLAY-HINT validation based on RFC specifications
    # Common patterns: "1d", "2d", "1d-1d:1d:1d.1d,1a", "255a", etc.
    cond do
      String.match?(hint_string, ~r/^\d+[adox]$/) ->
        # Simple format: digits followed by format character
        {:ok, hint_string}
      String.match?(hint_string, ~r/^[\d\-:.,a-z]+$/) ->
        # Complex format with separators (basic validation)
        {:ok, hint_string}
      true ->
        {:error, "Invalid DISPLAY-HINT format. Expected format like '1d', '255a', etc."}
    end
  end
  # Parse TRAP-TYPE definition (SNMPv1 only)
  defp parse_trap_type(name, pos, [{:keyword, :trap_type, _} | rest], context) do
    with {:ok, enterprise, rest, context} <- parse_enterprise_clause(rest, context),
         {:ok, variables, rest, context} <- parse_optional_variables_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, trap_number, rest, context} <- parse_trap_number_assignment(rest, context) do
      
      trap_type = %{
        __type__: :trap_type,
        name: name,
        enterprise: enterprise,
        variables: variables || [],
        description: description,
        reference: reference,
        trap_number: trap_number,
        line: pos[:line]
      }
      
      {:ok, trap_type, rest, context}
    end
  end
  
  # Parse ENTERPRISE clause for TRAP-TYPE
  defp parse_enterprise_clause([{:keyword, :enterprise, _} | rest], context) do
    case rest do
      [{:identifier, enterprise_name, _} | rest] ->
        {:ok, enterprise_name, rest, context}
      [{:keyword, keyword, _} | rest] when keyword in [:snmp, :iso, :org, :dod, :internet, :mgmt, :mib] ->
        enterprise_name = convert_symbol_name(keyword)
        {:ok, enterprise_name, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "enterprise identifier",
          actual: get_token_type(rest),
          line: get_line_from_tokens(rest)
        ))}
    end
  end
  
  defp parse_enterprise_clause(tokens, context) do
    {:error, add_error(context, Error.new(:missing_clause,
      expected: "ENTERPRISE clause",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Parse optional VARIABLES clause for TRAP-TYPE
  defp parse_optional_variables_clause([{:keyword, :variables, _}, {:symbol, :open_brace, _} | rest], context) do
    case parse_object_list(rest, [], context) do
      {:ok, variables, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, variables, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_variables_clause(tokens, context) do
    # No VARIABLES clause present
    {:ok, nil, tokens, context}
  end
  
  # Parse trap number assignment: ::= number
  defp parse_trap_number_assignment([{:symbol, :assign, _}, {:number, trap_number, _} | rest], context) do
    {:ok, trap_number, rest, context}
  end
  
  defp parse_trap_number_assignment(tokens, context) do
    {:error, add_error(context, Error.new(:unexpected_token,
      expected: "trap number assignment (::= number)",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    ))}
  end
  
  # Parse MODULE-COMPLIANCE definition (SNMPv2 only)
  defp parse_module_compliance(name, pos, [{:keyword, :module_compliance, _} | rest], context) do
    with {:ok, status, rest, context} <- parse_status_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context),
         {:ok, reference, rest, context} <- parse_optional_reference_clause(rest, context),
         {:ok, module_clauses, rest, context} <- parse_optional_module_clauses(rest, context),
         {:ok, oid, rest, context} <- parse_oid_assignment(rest, context) do
      
      module_compliance = %{
        __type__: :module_compliance,
        name: name,
        status: status,
        description: description,
        reference: reference,
        module_clauses: module_clauses || [],
        oid: oid,
        line: pos[:line]
      }
      
      {:ok, module_compliance, rest, context}
    end
  end
  
  # Parse optional MANDATORY-GROUPS clause
  defp parse_optional_mandatory_groups_clause([{:keyword, :mandatory_groups, _}, {:symbol, :open_brace, _} | rest], context) do
    case parse_object_list(rest, [], context) do
      {:ok, groups, [{:symbol, :close_brace, _} | rest], context} ->
        {:ok, groups, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_mandatory_groups_clause(tokens, context) do
    # No MANDATORY-GROUPS clause present
    {:ok, nil, tokens, context}
  end
  
  # Parse optional OBJECT clauses for MODULE-COMPLIANCE
  defp parse_optional_object_clauses(tokens, context) do
    parse_object_clauses_list(tokens, [], context)
  end
  
  # Parse list of OBJECT clauses (can be multiple)
  defp parse_object_clauses_list([{:keyword, :object, _} | rest], clauses, context) do
    case parse_single_object_clause(rest, context) do
      {:ok, object_clause, rest, context} ->
        parse_object_clauses_list(rest, [object_clause | clauses], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_object_clauses_list(tokens, clauses, context) do
    {:ok, Enum.reverse(clauses), tokens, context}
  end
  
  # Parse a single OBJECT clause
  defp parse_single_object_clause([{:identifier, object_name, _} | rest], context) do
    with {:ok, syntax_clause, rest, context} <- parse_optional_syntax_clause(rest, context),
         {:ok, write_syntax_clause, rest, context} <- parse_optional_write_syntax_clause(rest, context),
         {:ok, min_access_clause, rest, context} <- parse_optional_min_access_clause(rest, context),
         {:ok, description, rest, context} <- parse_description_clause(rest, context) do
      
      object_clause = %{
        object: object_name,
        syntax: syntax_clause,
        write_syntax: write_syntax_clause,
        min_access: min_access_clause,
        description: description
      }
      
      {:ok, object_clause, rest, context}
    end
  end
  
  # Parse optional SYNTAX clause for OBJECT clause
  defp parse_optional_syntax_clause([{:keyword, :syntax, _} | rest], context) do
    case parse_syntax_value(rest, context) do
      {:ok, syntax, rest, context} ->
        {:ok, syntax, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_syntax_clause(tokens, context) do
    {:ok, nil, tokens, context}
  end
  
  # Parse optional WRITE-SYNTAX clause for OBJECT clause  
  defp parse_optional_write_syntax_clause([{:keyword, :write_syntax, _} | rest], context) do
    case parse_syntax_value(rest, context) do
      {:ok, write_syntax, rest, context} ->
        {:ok, write_syntax, rest, context}
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_optional_write_syntax_clause(tokens, context) do
    {:ok, nil, tokens, context}
  end
  
  # Parse optional MIN-ACCESS clause for OBJECT clause
  defp parse_optional_min_access_clause([{:keyword, :min_access, _} | rest], context) do
    case rest do
      [{:keyword, access_level, _} | rest] when access_level in [
        :not_accessible, :accessible_for_notify, :read_only, :read_write, :read_create
      ] ->
        {:ok, access_level, rest, context}
      [{:identifier, "read-only", _} | rest] ->
        {:ok, :read_only, rest, context}
      [{:identifier, "read-write", _} | rest] ->
        {:ok, :read_write, rest, context}
      _ ->
        {:error, add_error(context, Error.new(:unexpected_token,
          expected: "min-access level",
          actual: get_token_type(rest),
          line: get_line_from_tokens(rest)
        ))}
    end
  end
  
  defp parse_optional_min_access_clause(tokens, context) do
    {:ok, nil, tokens, context}
  end
  
  # Parse optional MODULE clauses for MODULE-COMPLIANCE
  defp parse_optional_module_clauses(tokens, context) do
    parse_module_clauses_list(tokens, [], context)
  end
  
  # Parse list of MODULE clauses (can be multiple)
  defp parse_module_clauses_list([{:identifier, "MODULE", _} | rest], clauses, context) do
    case parse_single_module_clause(rest, context) do
      {:ok, module_clause, rest, context} ->
        parse_module_clauses_list(rest, [module_clause | clauses], context)
      {:error, _} = error ->
        error
    end
  end
  
  defp parse_module_clauses_list(tokens, clauses, context) do
    {:ok, Enum.reverse(clauses), tokens, context}
  end
  
  # Parse a single MODULE clause
  defp parse_single_module_clause(tokens, context) do
    # Parse optional module name
    {module_name, rest} = case tokens do
      [{:comment, comment, _} | rest] -> 
        # Extract module name from comment like "-- docsIfExtMib"
        module_name = String.trim(String.replace(comment, "--", ""))
        {module_name, rest}
      [{:identifier, name, _} | rest] ->
        {name, rest}
      _ ->
        {nil, tokens}
    end
    
    with {:ok, mandatory_groups, rest, context} <- parse_optional_mandatory_groups_clause(rest, context),
         {:ok, object_clauses, rest, context} <- parse_optional_object_clauses(rest, context) do
      
      module_clause = %{
        module_name: module_name,
        mandatory_groups: mandatory_groups || [],
        object_clauses: object_clauses || []
      }
      
      {:ok, module_clause, rest, context}
    end
  end
  
  # Utility functions
  
  defp expect_token([{expected_type, _, _} | rest], {expected_type, _}, context) do
    {:ok, rest, context}
  end
  
  defp expect_token([{expected_type, value, _} | rest], {expected_type, expected_value}, context) 
       when value == expected_value do
    {:ok, rest, context}
  end
  
  defp expect_token([{actual_type, value, pos} | _rest], {expected_type, _}, context) do
    error = Error.new(:unexpected_token,
      expected: expected_type,
      actual: actual_type,
      value: value,
      line: pos[:line],
      column: pos[:column]
    )
    {:error, add_error(context, error)}
  end
  
  defp expect_token([], {expected_type, _}, context) do
    error = Error.new(:unexpected_eof, expected: expected_type)
    {:error, add_error(context, error)}
  end
  
  defp expect_identifier([{:identifier, name, _} | rest], context) do
    {:ok, name, rest, context}
  end
  
  # Some keywords can also be used as identifiers in certain contexts
  # This is especially important for TEXTUAL-CONVENTION definitions where type names
  # like DisplayString, RowStatus, MacAddress, etc. are tokenized as keywords
  defp expect_identifier([{:keyword, keyword, _} | rest], context) when keyword in [
    # Standard OID nodes
    :iso, :org, :dod, :internet, :mgmt, :mib, :system,
    # Common textual convention types
    :display_string, :row_status, :mac_address, :phys_address, :truth_value,
    :time_stamp, :time_interval, :date_and_time, :storage_type, :t_domain, :t_address,
    :test_and_incr, :autonomous_type, :instance_pointer, :variable_pointer, :row_pointer,
    # SNMP types that can be used as identifiers
    :counter32, :counter64, :gauge32, :timeticks, :opaque, :ip_address,
    :unsigned32, :integer32,
    # Basic types
    :integer, :octet, :string, :identifier, :bit, :bits
  ] do
    name = convert_symbol_name(keyword)
    {:ok, name, rest, context}
  end
  
  defp expect_identifier(tokens, context) do
    error = Error.new(:unexpected_token,
      expected: "identifier",
      actual: get_token_type(tokens),
      line: get_line_from_tokens(tokens)
    )
    {:error, add_error(context, error)}
  end
  
  defp add_error(context, error) do
    %{context | errors: [error | context.errors]}
  end
  
  defp get_token_type([{type, _, _} | _]), do: type
  defp get_token_type([]), do: :eof
  
  defp get_line_from_tokens([{_, _, %{line: line}} | _]), do: line
  defp get_line_from_tokens(_), do: 1
  
  defp check_for_module_identity(tokens) do
    # Simple lookahead to see if this MIB has MODULE-IDENTITY
    Enum.any?(tokens, fn
      {:keyword, :module_identity} -> true
      _ -> false
    end)
  end
  
  defp add_oid_assignment(definitions, _mib_name, _has_module_identity) do
    # For now, don't automatically add OID assignments to match test expectations
    # This can be re-enabled later when semantic analysis is implemented
    definitions
  end
  
  defp build_metadata(snmp_version, context) do
    %{
      compile_time: DateTime.utc_now(),
      compiler_version: "SnmpLib 0.1.0",
      source_file: "unknown",
      snmp_version: snmp_version,
      dependencies: extract_dependencies(context.imports),
      warnings: context.warnings,
      line_count: 0
    }
  end
  
  defp extract_dependencies(imports) do
    Enum.map(imports, & &1.from_module)
  end
  
  defp handle_parse_result(mib, context) do
    case {length(context.errors), length(context.warnings)} do
      {0, 0} -> {:ok, mib}
      {0, _} -> {:warning, mib, context.warnings}
      {_, _} -> {:error, context.errors}
    end
  end
  
  # Convert symbol atoms back to proper MIB names
  defp convert_symbol_name(:display_string), do: "DisplayString"
  defp convert_symbol_name(:counter32), do: "Counter32"
  defp convert_symbol_name(:counter64), do: "Counter64"
  defp convert_symbol_name(:gauge32), do: "Gauge32"
  defp convert_symbol_name(:timeticks), do: "TimeTicks"
  defp convert_symbol_name(:opaque), do: "Opaque"
  defp convert_symbol_name(:ip_address), do: "IpAddress"
  defp convert_symbol_name(:phys_address), do: "PhysAddress"
  defp convert_symbol_name(:mac_address), do: "MacAddress"
  defp convert_symbol_name(:truth_value), do: "TruthValue"
  defp convert_symbol_name(:test_and_incr), do: "TestAndIncr"
  defp convert_symbol_name(:autonomous_type), do: "AutonomousType"
  defp convert_symbol_name(:instance_pointer), do: "InstancePointer"
  defp convert_symbol_name(:variable_pointer), do: "VariablePointer"
  defp convert_symbol_name(:row_pointer), do: "RowPointer"
  defp convert_symbol_name(:row_status), do: "RowStatus"
  defp convert_symbol_name(:time_stamp), do: "TimeStamp"
  defp convert_symbol_name(:time_interval), do: "TimeInterval"
  defp convert_symbol_name(:date_and_time), do: "DateAndTime"
  defp convert_symbol_name(:storage_type), do: "StorageType"
  defp convert_symbol_name(:t_domain), do: "TDomain"
  defp convert_symbol_name(:t_address), do: "TAddress"
  defp convert_symbol_name(:integer), do: "INTEGER"
  defp convert_symbol_name(:octet), do: "OCTET"
  defp convert_symbol_name(:string), do: "STRING"
  defp convert_symbol_name(:identifier), do: "IDENTIFIER"
  defp convert_symbol_name(:bit), do: "BIT"
  defp convert_symbol_name(:bits), do: "BITS"
  
  # Common MIB definition keywords
  defp convert_symbol_name(:module_identity), do: "MODULE-IDENTITY"
  defp convert_symbol_name(:object_type), do: "OBJECT-TYPE"
  defp convert_symbol_name(:object_identity), do: "OBJECT-IDENTITY"
  defp convert_symbol_name(:object_group), do: "OBJECT-GROUP"
  defp convert_symbol_name(:notification_type), do: "NOTIFICATION-TYPE"
  defp convert_symbol_name(:notification_group), do: "NOTIFICATION-GROUP"
  defp convert_symbol_name(:module_compliance), do: "MODULE-COMPLIANCE"
  defp convert_symbol_name(:textual_convention), do: "TEXTUAL-CONVENTION"
  defp convert_symbol_name(:trap_type), do: "TRAP-TYPE"
  
  # Common type names
  defp convert_symbol_name(:mgmt), do: "mgmt"
  defp convert_symbol_name(:mib), do: "mib"
  defp convert_symbol_name(:iso), do: "iso"
  defp convert_symbol_name(:org), do: "org"
  defp convert_symbol_name(:dod), do: "dod"
  defp convert_symbol_name(:internet), do: "internet"
  defp convert_symbol_name(:system), do: "system"
  
  # Fallback for any other symbol
  defp convert_symbol_name(symbol) when is_atom(symbol) do
    symbol
    |> Atom.to_string()
    |> String.replace("_", "-")
    |> String.upcase()
  end
  
  defp convert_symbol_name(symbol), do: symbol
end